step "run-a-script-for-vault" {
    name = "Run a Script For Vault"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd C:\Users\Administrator\Downloads\vault_1.11.1_windows_amd64
                $env:PATH =$env:PATH+";."
                $env:VAULT_NAMESPACE="admin/STCApplications/"
                $env:VAULT_ADDR="https://stcapplications-cluster-public-vault-3fa2c317.4787661a.z1.hashicorp.cloud:8200"
                vault login -method=userpass  username="octopus-login" password="0ct0pu$"
                $ASPNETCORE_ENVIRONMENT = vault kv get -mount=ForceSetup -field=ASPNETCORE_ENVIRONMENT ForceSetupDev
                $ApiKey = vault kv get -mount=ForceSetup -field=ApiKey ForceSetupDev
                $AwsAccessKeyId = vault kv get -mount=ForceSetup -field=AwsAccessKeyId ForceSetupDev
                $ClientId = vault kv get -mount=ForceSetup -field=ClientId ForceSetupDev
                $ClientSecret = vault kv get -mount=ForceSetup -field=ClientSecret ForceSetupDev
                $LogGroup = vault kv get -mount=ForceSetup -field=LogGroup ForceSetupDev
                $ManagementApiUrl = vault kv get -mount=ForceSetup -field=ManagementApiUrl ForceSetupDev
                $MetadataAddress = vault kv get -mount=ForceSetup -field=MetadataAddress ForceSetupDev
                $OrganizationName = vault kv get -mount=ForceSetup -field=OrganizationName ForceSetupDev
                $Region = vault kv get -mount=ForceSetup -field=Region ForceSetupDev
                $SecretAccessKey = vault kv get -mount=ForceSetup -field=SecretAccessKey ForceSetupDev
                $SignupInvitationUrl = vault kv get -mount=ForceSetup -field=SignupInvitationUrl ForceSetupDev
                $UpdateServiceUrl = vault kv get -mount=ForceSetup -field=UpdateServiceUrl ForceSetupDev
                $UserPoolId = vault kv get -mount=ForceSetup -field=UserPoolId ForceSetupDev
                Set-OctopusVariable -name "Secret-ENV" -value "$ASPNETCORE_ENVIRONMENT"
                Set-OctopusVariable -name "Secret-ApiKey" -value "$ApiKey"
                Set-OctopusVariable -name "Secret-AwsAccessKeyId" -value "$AwsAccessKeyId"
                Set-OctopusVariable -name "Secret-ClientId" -value "$ClientId"
                Set-OctopusVariable -name "Secret-ClientSecret" -value "$ClientSecret"
                Set-OctopusVariable -name "Secret-LogGroup" -value "$LogGroup"
                Set-OctopusVariable -name "Secret-ManagementApiUrl" -value "$ManagementApiUrl"
                Set-OctopusVariable -name "Secret-MetadataAddress" -value "$MetadataAddress"
                Set-OctopusVariable -name "Secret-OrganizationName" -value "$OrganizationName"
                Set-OctopusVariable -name "Secret-Region" -value "$Region"
                Set-OctopusVariable -name "Secret-SecretAccessKey" -value "$SecretAccessKey"
                Set-OctopusVariable -name "Secret-SignupInvitationUrl" -value "$SignupInvitationUrl"
                Set-OctopusVariable -name "Secret-UpdateServiceUrl" -value "$UpdateServiceUrl"
                Set-OctopusVariable -name "Secret-UserPoolId" -value "$UserPoolId"
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "for-vault"
    }
}

step "run-a-script" {
    name = "Run a Script"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = "sudo docker system prune -f -a"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "stcapplications"
    }
}

step "send-success-email" {
    name = "Send \"Success\" Email"

    action {
        action_type = "Octopus.Email"
        properties = {
            Octopus.Action.Email.Body = <<-EOT
                Build #{Octopus.Space.Name} / #{Octopus.ProjectGroup.Name} / #{Octopus.Project.Name} :#{Octopus.Release.Number} is Successfully Deployed!
                
                The Release #{Octopus.Release.Number} is created by #{Octopus.Deployment.CreatedBy.DisplayName} on #{Octopus.Release.Created}.
                
                Environment : #{Octopus.Environment.Name}
                
                https://ametekstc.octopus.app#{Octopus.Web.DeploymentLink}
            EOT
            Octopus.Action.Email.Subject = "[OctopusDeploy, SUCCESS] Build #{Octopus.Space.Name} / #{Octopus.ProjectGroup.Name} / #{Octopus.Project.Name} :#{Octopus.Release.Number}"
            Octopus.Action.Email.ToTeamIds = "stc-mail-team"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "send-failed-email" {
    condition = "Failure"
    name = "Send \"Failed\" Email "

    action {
        action_type = "Octopus.Email"
        properties = {
            Octopus.Action.Email.Body = <<-EOT
                Build #{Octopus.Space.Name} / #{Octopus.ProjectGroup.Name} / #{Octopus.Project.Name} #{Octopus.Release.Number} is FAILED to Deploy!
                
                The Release #{Octopus.Release.Number} is created by #{Octopus.Deployment.CreatedBy.DisplayName} on #{Octopus.Release.Created}.
                
                Environment : #{Octopus.Environment.Name}
                
                https://ametekstc.octopus.app#{Octopus.Web.DeploymentLink}
            EOT
            Octopus.Action.Email.Priority = "High"
            Octopus.Action.Email.Subject = "[OctopusDeploy, FAILED] Build #{Octopus.Space.Name} / #{Octopus.ProjectGroup.Name} / #{Octopus.Project.Name} :#{Octopus.Release.Number}"
            Octopus.Action.Email.ToTeamIds = "stc-mail-team"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""
    }
}

step "deploy-amazon-ecs-service" {
    name = "Deploy Amazon ECS Service"
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "forcesetup-fargate-client-dev"
    }

    action {
        action_type = "aws-ecs"
        step_package_version = "1.3.3"
        worker_pool = "stcapplications"

        packages "forcesetup-client-fargate" {
            acquisition_location = "NotAcquired"
            feed = "ecr-us-east-1"
            package_id = "forcesetup-client-fargate"
            step_package_inputs_reference_id = "098c4509-ce41-4fc1-adc5-c32b76f237a3"
        }

        inputs {
            cfStackName = "ForceSetup-CLIENT-NAT-DEV"
            desiredCount = 1
            maximumHealthPercent = 200
            minimumHealthPercent = 100
            name = "ForceSetup-CLIENT-NAT-DEV"

            additionalTags {
                enableEcsManagedTags = true
            }

            containers {
                containerName = "ForceSetup-CLIENT-NAT-DEV"
                essential = true

                containerImageReference {
                    feedId = "Feeds-1199"
                    imageName = "forcesetup-client-fargate"
                    referenceId = "098c4509-ce41-4fc1-adc5-c32b76f237a3"
                }

                containerLogging {
                    logDriver = "<none>"
                    type = "manual"
                }

                containerPortMappings {
                    containerPort = 80
                    protocol = "tcp"
                }

                containerStorage {
                    readOnlyRootFileSystem = false
                }

                healthCheck {}

                networkSettings {
                    disableNetworking = false
                }

                repositoryAuthentication {
                    type = "default"
                }
            }

            loadBalancerMappings {
                containerName = "ForceSetup-CLIENT-NAT-DEV"
                containerPort = 80
                targetGroupArn = "arn:aws:elasticloadbalancing:us-east-1:427201084711:targetgroup/ForceSetup-CLIENT-NAT-DEV/4d41925524c6390a"
            }

            networkConfiguration {
                autoAssignPublicIp = true

                securityGroupIds {
                    id = "sg-0638a08aa0e88cac3"
                }

                subnetIds {
                    id = "subnet-0baa86cb8c195496f"
                }

                subnetIds {
                    id = "subnet-0ce4e6033cae96f7a"
                }
            }

            task {
                cpu = 256
                memory = 512
                taskExecutionRole = "arn:aws:iam::427201084711:role/ecsTaskExecutionRole"
                taskRole = "arn:aws:iam::427201084711:role/ecsTaskExecutionRole"

                runtimePlatform {
                    cpuArchitecture = "X86_64"
                    operatingSystemFamily = "LINUX"
                }
            }

            waitOption {
                timeout = 30
                type = "waitWithTimeout"
            }
        }
    }
}

step "deploy-amazon-ecs-service-1" {
    name = "Deploy Amazon ECS Service - clone (1)"
    package_requirement = "AfterPackageAcquisition"
    properties = {
        Octopus.Action.TargetRoles = "ccw-api-dev"
    }

    action {
        action_type = "aws-ecs"
        step_package_version = "1.3.3"
        worker_pool = "stcapplications"

        packages "ccw-api-fargate" {
            acquisition_location = "NotAcquired"
            feed = "ecr-us-east-1"
            package_id = "ccw-api-fargate"
            step_package_inputs_reference_id = "203c9751-ed5f-44e6-88c2-15947b1af758"
        }

        inputs {
            cfStackName = "CCW-API-NAT-DEV"
            desiredCount = 1
            maximumHealthPercent = 200
            minimumHealthPercent = 100
            name = "CCW-API-NAT-DEV"

            additionalTags {
                enableEcsManagedTags = true
            }

            containers {
                containerName = "CCW-API-NAT-DEV"
                essential = true

                containerImageReference {
                    feedId = "Feeds-1199"
                    imageName = "ccw-api-fargate"
                    referenceId = "203c9751-ed5f-44e6-88c2-15947b1af758"
                }

                containerLogging {
                    logDriver = "<none>"
                    type = "manual"
                }

                containerPortMappings {
                    containerPort = 80
                    protocol = "tcp"
                }

                containerStorage {
                    readOnlyRootFileSystem = false
                }

                environmentVariables {
                    key = "APPLICATION_VERSION"
                    type = "plain"
                    value = "#{Octopus.Action[Run a Script For Vault].Output.}"
                }

                environmentVariables {
                    key = "AWS_COGNITO_CLIENT_ID"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_COGNITO_REGION"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_COGNITO_USERPOOL"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_S3_ACCESS_KEY_ID"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_S3_SECRET_ACCESS_KEY"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_S3_DATAFILE_BUCKET"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_S3_CERTIFICATES_BUCKET"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AWS_S3_REGION"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "AZURE_SIGNALR_CONNECTION"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "DB_HOST"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "DB_DATABASE"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "DB_USER"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "DB_PASSWORD"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "MANAGEMENT_API_URL"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "RaygunApiKey"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "RaygunApplicationVersion"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "RaygunEnvironment"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "SIGNALR_DETAILED_ERRORS"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "Authentication:Cognito:ClientId"
                    type = "plain"
                    value = ""
                }

                environmentVariables {
                    key = "Authentication:Cognito:MetadataAddress"
                    type = "plain"
                    value = ""
                }

                healthCheck {}

                networkSettings {
                    disableNetworking = false
                }

                repositoryAuthentication {
                    type = "default"
                }
            }

            loadBalancerMappings {
                containerName = "CCW-API-NAT-DEV"
                containerPort = 80
                targetGroupArn = "arn:aws:elasticloadbalancing:us-east-1:427201084711:targetgroup/CCW-API-NAT-DEV/bfac0a47bfddf4c8"
            }

            networkConfiguration {
                autoAssignPublicIp = true

                securityGroupIds {
                    id = "sg-075608d84e2ce663b"
                }

                subnetIds {
                    id = "subnet-0df658938b9863652"
                }

                subnetIds {
                    id = "subnet-020fe2f127886daff"
                }
            }

            task {
                cpu = 256
                memory = 512
                taskExecutionRole = "arn:aws:iam::427201084711:role/ecsTaskExecutionRole"
                taskRole = "arn:aws:iam::427201084711:role/ecsTaskExecutionRole"

                runtimePlatform {
                    cpuArchitecture = "X86_64"
                    operatingSystemFamily = "LINUX"
                }
            }

            waitOption {
                timeout = 30
                type = "waitWithTimeout"
            }
        }
    }
}

step "run-a-script-clone-1" {
    name = "Run a Script - clone (1)"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                cd C:\Users\Administrator\Downloads\vault_1.11.1_windows_amd64
                $env:PATH =$env:PATH+";."
                $env:VAULT_NAMESPACE="admin"
                $env:VAULT_ADDR="https://stcapplications-cluster-public-vault-3fa2c317.4787661a.z1.hashicorp.cloud:8200"
                vault login -method=userpass  username="root-user" password="Ametek@123"
                $env:VAULT_NAMESPACE="admin/STCApplications/"
                vault kv put -mount=test p aws-s3-key=$AWS_SECRET_ACCESS_KEY
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "for-vault"
    }
}

step "raygun-deployment-script" {
    name = "Raygun Deployment Script"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                Write-Host "Adding deployment in Raygun"+
                
                $githubSha = ""
                if ((Test-Path variable:\GithubToken) -And (Test-Path variable:\GithubRepo)) {
                    try {
                        $repo = "https://api.github.com/repos/" + $GithubRepo
                        $tagName = "build-" + $OctopusParameters["Octopus.Action[DEPLOYMENT_STEP_NAME].Package.NuGetPackageVersion"]
                        $githuburl = "$repo/git/refs/tags/"+ $tagName + "?access_token=" + $GithubToken
                        $tagOutput = Invoke-RestMethod -Uri $githuburl
                        $githubCommitUrl = $tagOutput.object.url + "?access_token=" + $GithubToken
                        $output = Invoke-RestMethod -Uri $githubCommitUrl
                        $githubSha = $output.object.sha
                    }
                   catch {
                        Write-Host "Couldn't find Git tag"
                   }
                }
                
                $deploymentId = $OctopusParameters['Octopus.Release.Number']
                $ownerName = $OctopusParameters['Octopus.Deployment.CreatedBy.DisplayName']
                $emailAddress = $OctopusParameters['Octopus.Deployment.CreatedBy.EmailAddress']
                $comment = $OctopusParameters['Octopus.Release.Notes'];
                
                $command = ConvertTo-Json @{
                    apiKey = $RaygunApiKey
                    version = $deploymentId
                    ownerName = $ownerName
                    emailAddress = $emailAddress
                    comment = $comment
                    scmIdentifier = $githubSha
                }
                
                $url = "https://app.raygun.com/deployments?authToken=" + $RaygunAuthToken
                try {
                    Invoke-RestMethod -Uri $url -Body $command -Method Post -ContentType "application/json"
                    Write-Host "Added deployment in Raygun"
                } catch {
                    Write-Host "Error received when adding deployment in Raygun: " $_
                }
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "stcapplications"
    }
}

step "raygun-register-deployment" {
    name = "Raygun - Register Deployment"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-61"
            Octopus.Action.Template.Version = "10"
        }
        worker_pool = "for-vault"
    }
}

step "run-a-scriptff" {
    name = "Run a Scriptff"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Install the cli
                curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.2.0" bash
                # Setup configuration values
                SENTRY_AUTH_TOKEN=                 # From internal integration: node Release Integration 
                SENTRY_ORG=ametektci
                SENTRY_PROJECT=node
                VERSION=`sentry-cli releases propose-version`
                # Workflow to create releases
                sentry-cli releases new "$VERSION"
                sentry-cli releases set-commits "$VERSION" --auto
                sentry-cli releases finalize "$VERSION"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "stcapplications"
    }
}
